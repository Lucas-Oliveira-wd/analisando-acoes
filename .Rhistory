#colocando a som dos pontos em um vetor
res = c()
for (i in 1:500) {
if (is.na(sum(rank.ac[i,]))){
}
else{
res = c(res,sum(rank.ac[i,]))
}
}
#Ordenando o vetor
ord = order(res,na.last = NA,decreasing = T)
#retirando as 3 melhores empresas
best3=c()
for (i in ord) {
if(length(best3)<3)
best3 = c(best3,cod[i])
}
#Colocando os valores em ordem
sor = sort(res,na.last = NA,decreasing = T)
#Retirando os 3 melhores valores
val3 = c()
for (i in sor){
if(length(val3)<3)
val3 = c(val3,i)
}
#Plotando o gr?fico
pct = round(val3/sum(val3)*100,2)
best3 = paste(best3,pct)
best3 = paste(best3,"%",sep = " ")
pie(val3,labels = best3,col = rainbow(length(val3)),
main = "Porcentagem das A??es")
#retirando as 10 melhores empresas
best10=c()
for (i in ord) {
if(length(best10)<10)
best10 = c(best10,cod[i])
}
#Retirando os 3 melhores valores
val10 = c()
for (i in sor){
if(length(val10)<10)
val10 = c(val10,i)
}
#printando os 10 melhores
print.10 = data.frame(best10,val10)
print(print.10)
###############################################################################
###########             Analisando o melhor FII               #################
###############################################################################
#Lendo a biblioteca necess?ria
library(readxl)
#importando a planilha de dados
setwd(setwd("G:/Meu Drive/financas/investimentos/"))
fii <- read_excel(
"G:/Meu Drive/financas/investimentos/fiis/fii.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#colocando cada coluna em um vetor
cod = c()
for (i in fii[,'CODIGO']) {
cod = c(cod,i)
}
setor = c()
for (i in fii[,'SETOR']) {
setor = c(setor,i)
}
liq.diaria = c()
for (i in fii[,'LIQUIDEZ DIARIA']) {
liq.diaria = c(liq.diaria,i)
}
div = c()
for (i in fii[,'DIVIDEND']) {
div = c(div,i)
}
dy.3m = c()
for (i in fii[,'DY (3M) M']) {
dy.3m = c(dy.3m,i)
}
dy.6m = c()
for (i in fii[,'DY (6M) M']) {
dy.6m = c(dy.6m,i)
}
dy.12m = c()
for (i in fii[,'DY (12M) M']) {
dy.12m = c(dy.12m,i)
}
dy.ano = c()
for (i in fii[,"DY ANO"]) {
dy.ano = c(dy.ano,i)
}
p.vpa = c()
for (i in fii[,'P/VPA']) {
p.vpa = c(p.vpa,i)
}
dy.p = c()
for (i in fii[,'DY P']) {
dy.p = c(dy.p,i)
}
var.p = c()
for (i in fii[,'VARIACAO P']) {
var.p = c(var.p,i)
}
rent.p = c()
for (i in fii[,'RENTAB. PATR. P']) {
rent.p = c(rent.p,i)
}
rent.ac = c()
for (i in fii[,'RENTAB. PATR. AC']) {
rent.ac = c(rent.ac,i)
}
vac.fis = c()
for (i in fii[,'VACANCIA FIS']) {
vac.fis = c(vac.fis,i)
}
vac.fin = c()
for (i in fii[,'VACANCIA FIN']) {
vac.fin = c(vac.fin,i)
}
quant = c()
for (i in fii[,'QUANTIDADE']) {
quant = c(quant,i)
}
desv.p = c()
for (i in fii[,'DESV. PAD. DIV.Y']) {
desv.p = c(desv.p,i)
}
tend = c()
for (i in fii[,"DIV.Y TENDENCIA"]) {
tend = c(tend,i)
}
#Ranqueando os fiis e colocando as posi??es em um dataframe
rank.ac = data.frame(.5*rank(liq.diaria), 1.5*rank(div), 1.6*rank(dy.3m),
1.7*rank(dy.6m), 1.8*rank(dy.12m), 1.8*rank(dy.ano),
.7*rank(-p.vpa), 1.1*rank(dy.p), 1*rank(var.p),
.8*rank(rent.p), 1.1*rank(rent.ac), .6*rank(-vac.fis),
.5*rank(-vac.fin), 3*rank(quant), 4*rank(-desv.p),
3*rank(tend) ,row.names = cod)
#colocando a som dos pontos em um vetor
res = c()
for (i in 1:500) {
if (is.na(sum(rank.ac[i,]))){
}
else{
res = c(res,sum(rank.ac[i,]))
}
}
#Ordenando o vetor
ord = order(res,na.last = NA,decreasing = T)
#retirando as 3 melhores empresas
best3=c()
for (i in ord) {
if(length(best3)<3)
best3 = c(best3,cod[i])
}
#Colocando os valores em ordem
sor = sort(res,na.last = NA,decreasing = T)
#Retirando os 3 melhores valores
val3 = c()
for (i in sor){
if(length(val3)<3)
val3 = c(val3,i)
}
#Plotando o gr?fico
pct = round(val3/sum(val3)*100,2)
best3 = paste(best3,pct)
best3 = paste(best3,"%",sep = " ")
pie(val3,labels = best3,col = rainbow(length(val3)),
main = "Porcentagem das A??es")
#retirando as 10 melhores empresas
best10=c()
for (i in ord) {
if(length(best10)<10)
best10 = c(best10,cod[i])
}
#Retirando os 3 melhores valores
val10 = c()
for (i in sor){
if(length(val10)<10)
val10 = c(val10,i)
}
#printando os 10 melhores
print.10 = data.frame(best10,val10)
print(print.10)
###############################################################################
###########             Analisando o melhor FII               #################
###############################################################################
#Lendo a biblioteca necess?ria
library(readxl)
#importando a planilha de dados
setwd(setwd("G:/Meu Drive/financas/investimentos/"))
fii <- read_excel(
"G:/Meu Drive/financas/investimentos/fiis/fii.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#colocando cada coluna em um vetor
cod = c()
for (i in fii[,'CODIGO']) {
cod = c(cod,i)
}
setor = c()
for (i in fii[,'SETOR']) {
setor = c(setor,i)
}
liq.diaria = c()
for (i in fii[,'LIQUIDEZ DIARIA']) {
liq.diaria = c(liq.diaria,i)
}
div = c()
for (i in fii[,'DIVIDEND']) {
div = c(div,i)
}
dy.3m = c()
for (i in fii[,'DY (3M) M']) {
dy.3m = c(dy.3m,i)
}
dy.6m = c()
for (i in fii[,'DY (6M) M']) {
dy.6m = c(dy.6m,i)
}
dy.12m = c()
for (i in fii[,'DY (12M) M']) {
dy.12m = c(dy.12m,i)
}
dy.ano = c()
for (i in fii[,"DY ANO"]) {
dy.ano = c(dy.ano,i)
}
p.vpa = c()
for (i in fii[,'P/VPA']) {
p.vpa = c(p.vpa,i)
}
dy.p = c()
for (i in fii[,'DY P']) {
dy.p = c(dy.p,i)
}
var.p = c()
for (i in fii[,'VARIACAO P']) {
var.p = c(var.p,i)
}
rent.p = c()
for (i in fii[,'RENTAB. PATR. P']) {
rent.p = c(rent.p,i)
}
rent.ac = c()
for (i in fii[,'RENTAB. PATR. AC']) {
rent.ac = c(rent.ac,i)
}
vac.fis = c()
for (i in fii[,'VACANCIA FIS']) {
vac.fis = c(vac.fis,i)
}
vac.fin = c()
for (i in fii[,'VACANCIA FIN']) {
vac.fin = c(vac.fin,i)
}
quant = c()
for (i in fii[,'QUANTIDADE']) {
quant = c(quant,i)
}
desv.p = c()
for (i in fii[,'DESV. PAD. DIV.Y']) {
desv.p = c(desv.p,i)
}
tend = c()
for (i in fii[,"DIV.Y TENDENCIA"]) {
tend = c(tend,i)
}
#Ranqueando os fiis e colocando as posi??es em um dataframe
rank.ac = data.frame(.5*rank(liq.diaria), 1.5*rank(div), 1.6*rank(dy.3m),
1.7*rank(dy.6m), 1.8*rank(dy.12m), 1.8*rank(dy.ano),
1*rank(-p.vpa), 0,8*rank(dy.p), 1.2*rank(var.p),
.7*rank(rent.p), 1.1*rank(rent.ac), .6*rank(-vac.fis),
.5*rank(-vac.fin), 3*rank(quant), 4*rank(-desv.p),
3*rank(tend) ,row.names = cod)
#colocando a som dos pontos em um vetor
res = c()
for (i in 1:500) {
if (is.na(sum(rank.ac[i,]))){
}
else{
res = c(res,sum(rank.ac[i,]))
}
}
#Ordenando o vetor
ord = order(res,na.last = NA,decreasing = T)
#retirando as 3 melhores empresas
best3=c()
for (i in ord) {
if(length(best3)<3)
best3 = c(best3,cod[i])
}
#Colocando os valores em ordem
sor = sort(res,na.last = NA,decreasing = T)
#Retirando os 3 melhores valores
val3 = c()
for (i in sor){
if(length(val3)<3)
val3 = c(val3,i)
}
#Plotando o gr?fico
pct = round(val3/sum(val3)*100,2)
best3 = paste(best3,pct)
best3 = paste(best3,"%",sep = " ")
pie(val3,labels = best3,col = rainbow(length(val3)),
main = "Porcentagem das A??es")
#retirando as 10 melhores empresas
best10=c()
for (i in ord) {
if(length(best10)<10)
best10 = c(best10,cod[i])
}
#Retirando os 3 melhores valores
val10 = c()
for (i in sor){
if(length(val10)<10)
val10 = c(val10,i)
}
#printando os 10 melhores
print.10 = data.frame(best10,val10)
print(print.10)
library(tidyverse)
library(gridExtra)
df_tri = read.csv("data/acoesb3.csv")
df_day = read.csv("data/acoesb3cot.csv")
#gridExtra::grid.table(df_day %>% slice(1:20)) # para plotar o db
ult_cot = cod = cotAtual = divY = c()
for (i in 1:length(df_day[,"ultCot"])){
if (df_day[i,"cod"] %in% cod){
j = match(df_day[i,"cod"], cod)
if (df_day[i,"ultCot"]>df_day[j,"ultCot"]){
ult_cot = ult_cot[-j]; cod = cod[-j]; cotAtual = cotAtual[-j];
divY = divY[-j]
ult_cot = c(ult_cot, df_day[i,"ultCot"])
cod = c(cod, df_day[i,"cod"])
cotAtual = c(cotAtual, df_day[i,"cotAtual"])
divY = c(divY, df_day[i, "divYield"])
}
} else {
ult_cot = c(ult_cot, df_day[i,"ultCot"])
cod = c(cod, df_day[i,"cod"])
cotAtual = c(cotAtual, df_day[i,"cotAtual"])
divY = c(divY, df_day[i, "divYield"])
}
}
df_day_fil = data.frame(cod, cotAtual, divY, ult_cot)
ult_bal = codigo = roic = cres_rec5 = n_ac = divb = disp = ativc = c();
ativ = patl = recl12 = ebit12 = Lucl12 = recl3 = c()
ult_cot_t = cotAtual_t = divY_t = c()
for (i in 1:length(df_tri[,"ultBal"])){
if (df_tri[i,"ultBal"] == "2022-09-30"){
j = match(df_tri[i,"codigo"], cod)
ult_cot_t = c(ult_cot_t, ult_cot[j])
cotAtual_t = c(cotAtual_t, cotAtual[j])
ult_bal =  c(ult_bal, df_tri[i,"ultBal"])
codigo = c(codigo, df_tri[i,"codigo"])
roic = c(roic, df_tri[i,"roic"])
cres_rec5 = c(cres_rec5, df_tri[i,"cresRec5a"])
divY_t = c(divY_t, divY[j])
n_ac = c(n_ac, df_tri[i,"nAcoes"])
divb = c(divb, df_tri[i,"divBruta"])
disp = c(disp, df_tri[i,"disponib"])
ativc = c(ativc, df_tri[i,"ativCirc"])
ativ = c(ativ, df_tri[i,"ativos"])
patl = c(patl, df_tri[i,"patLiq"])
recl12 = c(recl12, df_tri[i,"recLiq12m"])
ebit12 = c(ebit12, df_tri[i,"ebit12m"])
Lucl12 = c(Lucl12, df_tri[i,"LucLiq12m"])
recl3 = c(recl3, df_tri[i,"recLiq3m"])
}
}
ult_bal_dates = c()
for (i in df_tri[,"ultBal"]){
if (i %in% ult_bal_dates){}
else{
ult_bal_dates = c(ult_bal_dates, i)
}
}
per = c()
for (i in length(df_tri[,"ultBal"])){
j = match(df_tri[i,"ultBal"], ult_bal_dates)
per = c(per,data.frame(ult_bal, codigo, roic, cres_rec5, n_ac, divb, disp,
ativc, ativ, patl, recl12, ebit12, Lucl12, recl3))
}
df_tri_3t22 = data.frame(ult_cot_t, cotAtual_t, ult_bal, codigo, roic, cres_rec5,
divY_t, n_ac, divb, disp,
ativc, ativ, patl, recl12, ebit12, Lucl12, recl3,
row.names = codigo)
for (c in 1:length(df_tri_3t22[1,])){
for (r in 1:length(df_tri_3t22[,1])){
if (df_tri_3t22[r,c]<0){
print(c(row.names(df_tri_3t22)[r],colnames(df_tri_3t22)[c]))
}
}
}
#gridExtra::grid.table(df_tri_3t22 %>% slice(1:20))
pl = round(cotAtual_t/(Lucl12/n_ac), 2)
pv = round(cotAtual_t/(patl/n_ac), 2)
roe = round((Lucl12/patl)*100, 2)
roic = round(roic, 2)
p_cxa = round(cotAtual_t/(disp/n_ac), 2)
p_ativc = round(cotAtual_t/(ativc/n_ac), 2)
p_ativ = round(cotAtual_t/(ativ/n_ac), 2)
divbr_p = round((divb/patl), 2)
div_cxa = round(divb/disp, 2)
marg_ebit = round((ebit12/recl12)*100, 2)
marg_liq = round((Lucl12/recl12)*100, 2)
cres_rec5 = round(cres_rec5, 2)
divY_t = round(divY_t, 2)
lynch = round((divY_t+(cres_rec5/5))/pl, 2)
div_lucm = round(divb/(Lucl12/12), 2)
#Criando ranking para atribuir pontos empresas
rank.ac = data.frame(rank(-pl), rank(-pv), rank(roe), rank(roic),
rank(-p_cxa), rank(-p_ativc), rank(-p_ativ),
rank(-divbr_p), rank(-div_cxa),
rank(marg_ebit), rank(marg_liq), rank(cres_rec5),
rank(divY_t), rank(lynch), rank(-div.Lucm),
row.names = codigo)
#Criando ranking para atribuir pontos empresas
rank.ac = data.frame(rank(-pl), rank(-pv), rank(roe), rank(roic),
rank(-p_cxa), rank(-p_ativc), rank(-p_ativ),
rank(-divbr_p), rank(-div_cxa),
rank(marg_ebit), rank(marg_liq), rank(cres_rec5),
rank(divY_t), rank(lynch), rank(-div_lucm),
row.names = codigo)
#colocando a som dos pontos em um vetor
res = c()
for (i in 1:500) {
if (is.na(sum(rank.ac[i,]))){
}
else{
res = c(res,sum(rank.ac[i,]))
}
}
#Ordenando o vetor
ord = order(res,na.last = NA,decreasing = T)
#retirando as 7 melhores empresas
best7=c()
for (i in ord) {
if(length(best7)<7)
best7 = c(best7,cod[i])
}
#Colocando os valores em ordem
sor = sort(res,na.last = NA,decreasing = T)
#Retirando os 7 melhores valores
val7 = c()
#Colocando os valores em ordem
sor = sort(res,na.last = NA,decreasing = T)
#Retirando os 7 melhores valores
val7 = c()
for (i in sor){
if(length(val7)<7)
val7 = c(val7,i)
}
#retirando as empresas em ordem
best.e=c()
for (i in ord) {
best.e = c(best.e,cod[i])
}
#Retirando os 15 valores em ordem
val.e = c()
for (i in sor){
val.e = c(val.e,i)
}
#preparando para printar as empresas com os valores em ordem
print.e = data.frame(best.e,val.e)
print.e
best7
rmv_neg_pl = function(df){
pl_neg = c()
col_i = match("P/L",colnames(df))
len = length(df[,col_i])
for (r in 1:len){
if (!is.na(df[r,col_i])){
if (df[r,col_i] < 0){
pl_neg = c(pl_neg,(df[r,"P/L"]))
}
}
}
for (i in pl_neg) {
if (i %in% df[,col_i]){
df = df[-match(i,df[,col_i]),]
}
}
return(df)
}
rmv_neg_pvpa = function(df){
pvpa_neg = c()
col_i = match("P/VPA",colnames(df))
len = length(df[,col_i])
for (r in 1:len){
if (!is.na(df[r,col_i])){
if (df[r,col_i] < 0){
pvpa_neg = c(pvpa_neg,df[r,"P/VPA"])
}
}
}
for (i in pvpa_neg) {
if (i %in% df[,col_i]){
df = df[-match(i,df[,col_i]),]
}
}
return(df)
}
res = rmv_neg_pl(res)
